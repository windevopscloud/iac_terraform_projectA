name: github-runner-apply

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type 'apply-dev' to confirm apply in dev"
        required: true
        default: "apply-dev"
      plan_artifact:
        description: "Plan artifact name from Terraform Plan workflow"
        required: false
        default: "terraform-plan"

concurrency:
  group: github-runner-apply
  cancel-in-progress: false

env:
  VAR_BACKEND: dev
  AWS_REGION: "us-east-1"
  TF_WORKSPACE: dev
  TF_DIRECTORY: "./dev"

jobs:
  terraform-apply:
    if: github.event.inputs.confirm == 'apply-dev'
    runs-on: runner_projectA
    environment: dev
    timeout-minutes: 60
    defaults:
      run:
        working-directory: ${{ env.TF_DIRECTORY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ðŸ”¹ Download Plan Artifact if provided
      - name: Download Plan Artifact if provided
        uses: actions/download-artifact@v4
        if: github.event.inputs.plan_artifact != ''
        with:
          name: ${{ github.event.inputs.plan_artifact }}
          path: ${{ env.TF_DIRECTORY }}/
        continue-on-error: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS permissions
        run: aws sts get-caller-identity

      - name: Terraform Init
        run: terraform init -reconfigure -backend-config=${VAR_BACKEND}-backend.hcl

      - name: Terraform Plan (if no plan provided)
        if: github.event.inputs.plan_artifact == ''
        run: |
          terraform plan \
            -var-file="${VAR_BACKEND}.tfvars" \
            -out=tfplan -no-color

      - name: Terraform Apply
        timeout-minutes: 60
        run: |
          if [ -f "tfplan" ]; then
            terraform apply -input=false -no-color tfplan
          else
            echo "No plan file found. Applying directly"
            terraform apply \
              -var-file="${VAR_BACKEND}.tfvars" \
              -auto-approve -no-color
          fi