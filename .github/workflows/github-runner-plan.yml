name: github-runner-plan

on:
  pull_request:
    branches: [ "dev" ]
  workflow_dispatch:
    inputs:
      terraform_flags:
        description: "Additional Terraform flags"
        required: false
        default: ""

env:
  VAR_BACKEND: dev
  AWS_REGION: "us-east-1"
  TF_WORKSPACE: dev
  TF_DIRECTORY: "./dev"
  PK_DIRECTORY: "./dev/eks/packer"
  AMI_NAME_PREFIX: "eks-tools"

jobs:

  build-ami:
    runs-on: runner_projectA
    environment: dev
    env:
      HOME: /tmp
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      - name: Verify AWS CLI
        run: aws sts get-caller-identity

      - name: Detect changes in packer folder
        id: packer_check
        run: |
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
          git fetch origin ${{ github.head_ref }}:${{ github.head_ref }}
          echo "Comparing ${{ github.base_ref }}...${{ github.head_ref }}"
          if git diff --name-only ${{ github.base_ref }}...${{ github.head_ref }} | grep -q '^dev/eks/packer/'; then
            echo "PACKER_CHANGED"  
            echo "PACKER_CHANGED=true" >> $GITHUB_ENV
          else
            echo "PACKER_NOT_CHANGED"
            echo "PACKER_CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Check if AMI exists
        id: ami_check
        run: |
          AMI_ID=$(aws ec2 describe-images \
            --owners self \
            --region ${{ env.AWS_REGION }} \
            --filters "Name=name,Values=${{ env.AMI_NAME_PREFIX }}-*" \
            --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' \
            --output text)

          if [ "$AMI_ID" = "None" ] || [ -z "$AMI_ID" ]; then
            echo "No AMI found"
            echo "AMI_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Found AMI: $AMI_ID"
            echo "AMI_EXISTS=true" >> $GITHUB_ENV
            echo "EKS_TOOLS_AMI_ID=$AMI_ID" >> $GITHUB_ENV
          fi

      - name: Setup Packer
        if: env.PACKER_CHANGED == 'true' || env.AMI_EXISTS == 'false'
        uses: hashicorp/setup-packer@v2
        with:
          version: "1.14.2"
          
      - name: Install Packer Amazon plugin
        if: env.PACKER_CHANGED == 'true' || env.AMI_EXISTS == 'false'
        working-directory: ${{ env.PK_DIRECTORY }}
        run: |
          mkdir -p $HOME/.packer.d/plugins
          packer plugins install github.com/hashicorp/amazon
          packer plugins installed

      - name: Init Packer
        if: env.PACKER_CHANGED == 'true' || env.AMI_EXISTS == 'false'
        working-directory: ${{ env.PK_DIRECTORY }}
        run: |
          packer version
          packer init .

      - name: Build EKS Tools AMI
        if: env.PACKER_CHANGED == 'true' || env.AMI_EXISTS == 'false'
        working-directory: ${{ env.PK_DIRECTORY }}
        run: |
          set -euo pipefail
          echo "Building new AMI..."
          packer build . | tee build.log

  terraform-plan:
    runs-on: runner_projectA
    environment: dev
    defaults:
      run:
        working-directory: ${{ env.TF_DIRECTORY }}
        shell: bash
    needs: [build-ami]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.0"
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      - name: Verify AWS CLI
        run: aws sts get-caller-identity

      - name: Terraform Init
        run: |
          terraform init \
            -reconfigure \
            -backend-config=${VAR_BACKEND}-backend.hcl \
            -input=false

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Format Check
        run: |
          terraform fmt -check -recursive -diff
          echo "Format check completed"

      - name: Terraform Plan
        run: |
          terraform plan \
            -var-file="${VAR_BACKEND}.tfvars" \
            -input=false \
            -no-color \
            -out=tfplan \
            ${{ github.event.inputs.terraform_flags }}